#version 460 core
struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

struct Light {
    vec3 position;
    vec3 color;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light;
uniform Material material;
uniform vec3 viewPos;
uniform sampler2D UpTex;
uniform float Time;

out vec4 FragColor;

in vec3 normal;
in vec3 FragPos;
in vec2 TexCoord;


void main()
{
    vec2 newTexCoord = vec2(TexCoord.x + Time, TexCoord.y);
    vec3 lightColor = light.color;
    // 环境光
    vec3 ambient = lightColor * vec3(texture(material.diffuse, TexCoord)) * light.ambient;

    // 漫反射 
    vec3 norm = normalize(normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = lightColor * (diff * vec3(texture(material.diffuse, TexCoord))) * light.diffuse;

    // 镜面光
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = lightColor * (spec * vec3(texture(material.specular, TexCoord))) * light.specular;

    // 发光贴图
    vec3 finalUpTex = vec3(texture(UpTex, newTexCoord)) * vec3(texture(material.specular, TexCoord)) * 2;
    
    
    
    vec3 result = ambient + diffuse + specular;
    
    FragColor = vec4(result, 0.5f);
}