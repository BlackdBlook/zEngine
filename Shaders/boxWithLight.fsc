 #version 460 core

in vec3 normal;
in vec3 FragPos;
out vec4 FragColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{
    vec3 lightColor = vec3(1,1,1);
    vec3 color = vec3(1.0f, 1.0f, 1.0f);
    float huanjing = 0.1;
    float jingmian = 0.5;

    vec3 norm = normalize(normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm,lightDir),0.0);

    vec3 diffuse = diff * lightColor;

    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);

    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = jingmian * spec * lightColor;

    vec3 result = (huanjing + diffuse + specular) * color;
    FragColor = vec4(result, 1.0);
} 